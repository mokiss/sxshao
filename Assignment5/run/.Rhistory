plot(sh, mse)
yhat2.test = lapply(boost2, function(i)
predict(i, newdata = dat2[-train,], n.trees = 1000))
mse.test = sapply(1:10, function(i) mean( (yhat2.test[[i]] - dat2$Salary[-train])^2 ))
plot(sh, mse.test, xlab = "Shrinkage Parameter" , ylab = "Test Set MSE")
summary(boost2)
summary(boost2[[1]])
summary(boost2[[2]])
summary(boost2[[1]])[[1]]
summary(boost2[[1]])[[1,1]]
sapply(1:10, function(i) summary(boost2[[i]])[[1,1]])
plot(tree.car, type = "uniform")
text(tree.car, pretty =1, all=TRUE,cex=0.7)
plot(cv_fit$size,cv_fit$dev)
plot(cv_fit$size,cv_fit$dev, type = "b", xlab = "Size", ylab = "Deviance")
importance(bag.car)
set.seed()
set.seed(NULL)
summary(rf.car)
rf.car
plot(sh, mse, xlab = "Shrinkage Parameter" , ylab = "Training Set MSE")
plot(sh, mse, xlab = "Shrinkage Parameter" , ylab = "Training Set MSE", type = 'b')
plot(sh, mse.test, xlab = "Shrinkage Parameter" , ylab = "Test Set MSE")
plot(sh, mse.test, xlab = "Shrinkage Parameter" , ylab = "Test Set MSE", type = 'b')
sapply(1:10, function(i) summary(boost2[[i]])[[1,1]])
lapply(1:10, function(i) summary(boost2[[i]])[[1,1:2]])
lapply(1:10, function(i) summary(boost2[[i]])[[1:3,1]])
summary(boost2[[1]])
summary(boost2[[1]])[1]
summary(boost2[[1]])[1,1]
summary(boost2[[1]])[2,1]
summary(boost2[[1]])[1:2,1]
lapply(1:10, function(i) summary(boost2[[i]])[1:3,1])
imp = lapply(1:10, function(i) summary(boost2[[i]])[1:3,1])
imp
rferror = function(m, t){
rf = randomForest( Sales~.,data = dat1,subset = train, mtry= m , ntree = t, importance=TRUE)
yrf = predict(rf ,newdata = testdat)
mean((yrf- testdat$Sales)^2)
}
rferror(sqrt(10), 500)
rferror(sqrt(10), 500)
rferror(sqrt(10), 500)
mean((yhat.rf- testdat$Sales)^2)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
set.seed(1)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
dat1 = Carseats
n = nrow(dat1)
train = sample(1:n, n/2)
testdat = dat1[-train, ]
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
importance(rf.car)
set.seed(1)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
rferror(sqrt(10), 500)
rferror(sqrt(10), 500)
0:500
m
msqrt = sapply(0:500, function(i) rferror(sqrt(10), i))
msqrt = sapply(1:500, function(i) rferror(sqrt(10), i))
msqrt = sapply(1:100, function(i) rferror(sqrt(10), i*5))
m = sapply(1:500, function(i) rferror(10, i))
m = sapply(1:100, function(i) rferror(10, i*5))
m.5 = sapply(1:100, function(i) rferror(10/2, i*5))
library(ggplot2)
merror = data.frame(error = c(msqrt, m, m.5),
mtype = c(rep("sqrt m",100), rep("m", 100), rep("m/2", 100) ))
merror = data.frame(error = c(msqrt, m, m.5),
mtype = c(rep("sqrt m",100), rep("m", 100), rep("m/2", 100) )
tree = c(  rep(c(1:100)*5, 3)))
merror = data.frame(error = c(msqrt, m, m.5),
mtype = c(rep("sqrt m",100), rep("m", 100), rep("m/2", 100) ),
tree = c(  rep(c(1:100)*5, 3)))
View(merror)
ggplot(data = merror, aes( x = tree, y = error, color = factor(mtype))) + geom_line()
msqrt
m
train = sample(1:n, n/2)
testdat = dat1[-train, ]
dat1 = Carseats
n = nrow(dat1)
train = sample(1:n, n/2)
testdat = dat1[-train, ]
rferror = function(m, t){
rf = randomForest( Sales~.,data = dat1,subset = train, mtry= m , ntree = t, importance=TRUE)
yrf = predict(rf ,newdata = testdat)
mean((yrf- testdat$Sales)^2)
}
rferror(sqrt(10), 500)
rferror(sqrt(10), 500)
rferror(sqrt(10), 500)
msqrt = sapply(1:100, function(i) rferror(sqrt(10), i*5))
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
set.seed(1)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
bag.car = randomForest( Sales ~.,data= dat1 ,subset=train, mtry = 10)
yhat.bag = predict(bag.car ,newdata = testdat)
mean((yhat.bag- testdat$Sales)^2)
rf.car = randomForest( Sales~.,data = dat1,subset = train, mtry= sqrt(10) ,importance=TRUE)
yhat.rf = predict(rf.car ,newdata = testdat)
mean((yhat.rf- testdat$Sales)^2)
merror = data.frame(error = c(msqrt, m, m.5),
mtype = c(rep("sqrt m",100), rep("m", 100), rep("m/2", 100) ),
tree = c(  rep(c(1:100)*5, 3)))
ggplot(data = merror, aes( x = tree, y = error, color = factor(mtype))) + geom_line()
rferror(sqrt(10), 500)
set.seed(1234)
msqrt = sapply(1:100, function(i) rferror(sqrt(10), i*5))
m = sapply(1:100, function(i) rferror(10, i*5))
m.5 = sapply(1:100, function(i) rferror(10/2, i*5))
imp
m.3 = sapply(1:100, function(i) rferror(10/3, i*5))
merror = data.frame(error = c(msqrt, m, m.5, m.3),
mtype = c(rep("sqrt m",100), rep("m", 100), rep("m/2", 100), rep("m/3", 100) ),
tree = c(  rep(c(1:100)*5, 4)))
ggplot(data = merror, aes( x = tree, y = error, color = factor(mtype))) + geom_line()
rferror = function(m){
rf = randomForest( Sales~.,data = dat1,subset = train, mtry= m , importance=TRUE)
yrf = predict(rf ,newdata = testdat)
mean((yrf- testdat$Sales)^2)
}
merror = sapply(1:10, function(i) rferror(i))
merror
merrord = data.frame(error = merror, m = c(1:10))
ggplot(data = merror, aes( x = m, y = error) + geom_line()
)
ggplot(data = merror, aes( x = m, y = error)) + geom_line()
ggplot(data = merrord, aes( x = m, y = error)) + geom_line()
plot(tree.car, type = "uniform")
text(tree.car, pretty =1, all=TRUE,cex=0.7)
summary(testdat)
summary(tree.car)
dat1 = Carseats
n = nrow(dat1)
train = sample(1:n, n/2)
testdat = dat1[-train, ]
tree.car = tree( Sales ~., dat1 , subset = train)
cv_fit = cv.tree( tree.car)
plot(cv_fit$size,cv_fit$dev, type = "b", xlab = "Size", ylab = "Deviance")
cv_fit$size[ cv_fit$dev == min(cv_fit$dev)]
prune.car=prune.tree(tree.car,best = 8)
yhat.prune = predict(prune.car ,newdata = testdat)
mean((yhat.prune - testdat$Sales)^2)
yhat.tree = predict(tree.car, newdata = testdat)
mean((yhat.tree- testdat$Sales)^2)
library(ISLR)
dat1 = Carseats
n = nrow(dat1)
train = sample(1:n, n/2)
testdat = dat1[-train, ]
library(tree)
tree.car = tree( Sales ~., dat1 , subset = train)
yhat.tree = predict(tree.car, newdata = testdat)
mean((yhat.tree- testdat$Sales)^2)
cv_fit = cv.tree( tree.car)
plot(cv_fit$size,cv_fit$dev, type = "b", xlab = "Size", ylab = "Deviance")
cv_fit$size[ cv_fit$dev == min(cv_fit$dev)]
prune.car=prune.tree(tree.car,best = 14)
yhat.prune = predict(prune.car ,newdata = testdat)
mean((yhat.prune - testdat$Sales)^2)
cv_fit = cv.tree( tree.car)
plot(cv_fit$size,cv_fit$dev, type = "b", xlab = "Size", ylab = "Deviance")
cv_fit$size[ cv_fit$dev == min(cv_fit$dev)]
prune.car=prune.tree(tree.car,best = 10)
yhat.prune = predict(prune.car ,newdata = testdat)
mean((yhat.prune - testdat$Sales)^2)
yhat.tree = predict(tree.car, newdata = testdat)
mean((yhat.tree- testdat$Sales)^2)
cv_fit = cv.tree( tree.car)
plot(cv_fit$size,cv_fit$dev, type = "b", xlab = "Size", ylab = "Deviance")
cv_fit$size[ cv_fit$dev == min(cv_fit$dev)]
prune.car=prune.tree(tree.car,best = 12)
yhat.prune = predict(prune.car ,newdata = testdat)
mean((yhat.prune - testdat$Sales)^2)
dat2 = Hitters
dat2 = dat2[ !is.na(dat2$Salary),]
dat2$Salary = log(dat2$Salary)
train = sample(1:263, 200 )
library(gbm)
sh = c(1:10)/10
boost2 = lapply(sh, function(i)
gbm( Salary~.,data= dat2[train,], distribution="gaussian",n.trees=1000,shrinkage = i))
yhat2 = lapply(boost2, function(i)
predict(i, newdata = dat2[train,], n.trees = 1000))
mse = sapply(1:10, function(i) mean( (yhat2[[i]] - dat2$Salary[train])^2 ))
plot(sh, mse, xlab = "Shrinkage Parameter" , ylab = "Training Set MSE", type = 'b')
yhat2.test = lapply(boost2, function(i)
predict(i, newdata = dat2[-train,], n.trees = 1000))
mse.test = sapply(1:10, function(i) mean( (yhat2.test[[i]] - dat2$Salary[-train])^2 ))
plot(sh, mse.test, xlab = "Shrinkage Parameter" , ylab = "Test Set MSE", type = 'b')
qf(0.025,15,9)
qf(0.975,15,9)
dyn.load("/Users/Shawn/Documents/data/run/minmax.so")
re2 = .C("minmaxdif", as.character(f1), as.integer(yindex), as.numeric(0), as.numeric(0), as.integer(0))
dyn.load("/Users/Shawn/Documents/data/run/minmax.so")
yindex= c(10,11)
xindex = 9
f1 = "/Users/Shawn/Documents/data/trip_data_1.csv"
f2 = "/Users/Shawn/Documents/data/trip_fare_1.csv"
re2 = .C("minmaxdif", as.character(f1), as.integer(yindex), as.numeric(0), as.numeric(0), as.integer(0))
re2
pwd
getwd()
minmaxdif("/Users/Shawn/Documents/datda/run/minmax.so", "/Users/Shawn/Documents/data/trip_fare_1.csv", yindex
)
minmaxdif = function(c, f, index) {
dyn.load(c)
re = .C("minmaxdif", as.character(f), as.integer(index), as.numeric(0), as.numeric(0), as.integer(0))
dyn.unload(c)
out = c( max = re[[3]], min = re[[4]], n = re[[5]] )
return( out)
}
minmaxdif = function(c, f, index) {
dyn.load(c)
re = .C("minmaxdif", as.character(f), as.integer(index), as.numeric(0), as.numeric(0), as.integer(0))
dyn.unload(c)
out = c( max = re[[3]], min = re[[4]], n = re[[5]] )
return( out)
}
minmaxdif("/Users/Shawn/Documents/datda/run/minmax.so", "/Users/Shawn/Documents/data/trip_fare_1.csv", yindex
)
minmaxdif("/Users/Shawn/Documents/data/run/minmax.so", "/Users/Shawn/Documents/data/trip_fare_1.csv", yindex
)
dyn.load("/Users/Shawn/Documents/data/run/hist.so")
bound = c( 0, 650)
num = 200
wid = (bound[2] - bound[1])/num
result = rep(0,num)
.C("gethist", as.character(f2), as.integer(yindex),
as.numeric(result), as.numeric(bound), as.numeric(wid))
re = .C("gethist", as.character(f2), as.integer(yindex),
as.integer(result), as.numeric(bound), as.numeric(wid))
re
bound = c( 0, 652)
wid = (bound[2] - bound[1])/num
re = .C("gethist", as.character(f2), as.integer(yindex),
as.integer(result), as.numeric(bound), as.numeric(wid))
re
cumsum(1:10)
cum
breaks = 500
b = c(0, 587.79)
y = c(10,11)
gethistR = function(f, bound, num, index){
width = (bound[2]- bound[1])/num
con = file(f , 'r')
result = rep(0,num)
while( length( line <- readLines(con, n = 1)) > 0 ){
spli = strsplit(line, ",")
total.toll = as.numeric(spli[[1]][ index[2] ]) - as.numeric(spli[[1]][ index[1]])
if(total.toll >= bound[1] & total.toll <= bound[2]){
j = floor( (total.toll - bound[1])/width )
result[j] = result[j]+1
}
}
return(result)
}
gethistR(f2, b, breaks, y)
f=f2
bound = b
num = breaks
index = y
width = (bound[2]- bound[1])/num
con = file(f , 'r')
result = rep(0,num)
while( length( line <- readLines(con, n = 1)) > 0 ){
spli = strsplit(line, ",")
total.toll = as.numeric(spli[[1]][ index[2] ]) - as.numeric(spli[[1]][ index[1]])
if(total.toll >= bound[1] & total.toll <= bound[2]){
j = floor( (total.toll - bound[1])/width )
result[j] = result[j]+1
}
}
close(con)
con = file(f , 'r')
line <- readLines(con, n = 1)) >
line <- readLines(con, n = 1)
spli = strsplit(line, ",")
spli
line = readLines(con, n = 1)
line
spli = strsplit(line, ",")
total.toll = as.numeric(spli[[1]][ index[2] ]) - as.numeric(spli[[1]][ index[1]])
if(total.toll >= bound[1] & total.toll <= bound[2]){
j = floor( (total.toll - bound[1])/width )
result[j] = result[j]+1
}
setwd("/Users/Shawn/Documents/data/run")
system("R CMD SHLIB regsimpblb.c")
dyn.load("regsimpblb.so")
yindex= c(10,11)
xindex = 9
f1 = "/Users/Shawn/Documents/data/trip_data_1.csv"
f2 = "/Users/Shawn/Documents/data/trip_fare_1.csv"
samp = c(1,2,3)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,2,3,5,6)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,2,3,5,6, 22)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,5,6)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,5,6, 20)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,5,6, 20,33, 76,1090)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,5,6)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(1,5)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(6)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(6,15000000)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
samp = c(6,7,15000000)
.C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
y= c(10,11)
x = 9
file1 = "/Users/Shawn/Documents/data/trip_data_1.csv"
file2 = "/Users/Shawn/Documents/data/trip_fare_1.csv"
sampindex = c(6,7,15000000)
regsamp = function(c, f1, f2, yindex, xindex, samp){
dyn.load(c)
re = .C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(0) )
dyn.unload(c)
out = re[[5]]
out[5] = re[[8]]
names(out) = c("x", "y","xy","x^2","stop")
return(out)
}
regsamp("regsimpblb.so", file1, file2, y, x, sampindex)
n = 20
b = n^0.65
bindex = sample(1:n, b, replace = FALSE)
bindex
bindex.sort = bindex[order(bindex)]
boot1 = sample(bindex, n, replace = TRUE)
bindex.sort
boot
boot1
count1 = table(boot1)
names1 = as.integer(names(count1))
count1
names
names1
bindex.order
bindex.sort
names1 = names1[1:4]
names1
bindex.sort
search
find
bindex.sort
bindex.sort %in% names1
names1 %in% bindex.sort
names1
count1
names1 = c(4,9,14,17)
count1 = c(4,2,3,1)
bindex.sort %in% names1
count1
match(names1, bindex.sort)
bindex.sort
names1
summ = bindex.sort
summ[match(names1, bindex.sort)]
count1
names1
summ = rep(0, length(bindex.sort))
summ[match(names1, bindex.sort)] = count1
summ
bindex.sort
count1
names
names1
boot1 = sample(bindex, n, replace = TRUE)
count1 = table(boot1)
names1 = as.integer(names(count1))
summ = rep(0, length(bindex.sort))
summ[match(names1, bindex.sort)] = count1
count1
summ
boot1 = sample(bindex, n, replace = TRUE)
count1 = table(boot1)
names1 = as.integer(names(count1))
summ = rep(0, length(bindex.sort))
summ[match(names1, bindex.sort)] = count1
count1
boot1 = sample(bindex, 10, replace = TRUE)
count1 = table(boot1)
count1
boot1 = sample(bindex, 100, replace = TRUE)
count1 = table(boot1)
count1
boot = sample(bindex, n, replace = TRUE)
count.boot = table(boot)
names.boot = as.integer(names(count.boot))
summ = rep(0, length(bindex.sort))
summ[match(names.boot, bindex.sort)] = count.boot
summ
boot
bindex.sort
ns = c(14776616,13990177,15749229,15100469,15285050,14385457,13823841,12597110,14107694,15004557,
14388452,13971119 )
n = sum(ns)
b = n^0.65
bindex = sample(1:n, b, replace = FALSE)
bindex.sort = bindex[order(bindex)]
boot = sample(bindex, n, replace = TRUE)
count.boot = table(boot)
names.boot = as.integer(names(count.boot))
summ = rep(0, length(bindex.sort))
summ[match(names.boot, bindex.sort)] = count.boot
summ
summary(summ)
system("R CMD SHLIB regsimpblb.c")
dyn.load("regsimpblb.so")
regsamp = function(c, f1, f2, yindex, xindex, samp, weight){
dyn.load(c)
re = .C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(weight), as.integer(0) )
dyn.unload(c)
out = re[[5]]
out[5] = re[[9]]
out[6] = re[[6]]
names(out) = c("x", "y","xy","x^2","stop"，"n")
return(out)
}
regsamp = function(c, f1, f2, yindex, xindex, samp, weight){
dyn.load(c)
re = .C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(weight), as.integer(0) )
dyn.unload(c)
out = re[[5]]
out[5] = re[[9]]
out[6] = re[[6]]
names(out) = c("x", "y","xy","x^2","stop"，"n")
return(out)
}
regsamp = function(c, f1, f2, yindex, xindex, samp, weight){
dyn.load(c)
re = .C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(weight), as.integer(0) )
dyn.unload(c)
out = re[[5]]
out[5] = re[[9]]
out[6] = re[[6]]
names(out) = c("x", "y","xy","x^2","stop"，"n")
regsamp = function(c, f1, f2, yindex, xindex, samp, weight){
dyn.load(c)
re = .C("regsamp", as.character(f1), as.character(f2), as.integer(yindex), as.integer(xindex),
as.numeric( rep(0,4)), as.integer(0),as.integer(samp), as.integer(weight), as.integer(0) )
dyn.unload(c)
out = re[[5]]
out[5] = re[[9]]
out[6] = re[[6]]
names(out) = c("x", "y","xy","x^2","stop","n")
return(out)
}
w = c(3,3,0)
regsamp("regsimpblb.so", file1, file2, y, x, sampindex, w)
result = list()
result = list(12)
result = as.list( 1:12)
result[[1]] = regsamp("regsimpblb.so", file1, file2, y, x, sampindex, w)
sampindex[ (result[[1]][5]+1) :] -
sampindex[ (result[[1]][5]+1) :]
w[1:]
sampindex[ (result[[1]][5]+1) : length(sampindex)] -
0
sampindex[ (result[[1]][5]+1) : length(sampindex)]
sampindex[ (result[[1]][5]+1) : length(sampindex)] - result[[1]][6]
result[[1]][6]
w[  (result[[i]][5] +1) : length(w) ]
w[  (result[[1]][5] +1) : length(w) ]
w = c(3,3,3)
w = c(3,3,3)
w[  (result[[1]][5] +1) : length(w) ]
w = c(3,3,3,5)
w[  (result[[1]][5] +1) : length(w) ]
head(bindex.sort)
